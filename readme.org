This program calculates the Steenrod higher diagonals of a linear combination of simplices. 
* Representation
** simplex
   A simplex is represented as a list where the first element is :simplex and the second element is a vector of integers naming vertices, e.g.
   #+begin_src lisp
   '(:simplex #(0 1 2 3))
   #+end_src
** linear combination
   A list starting with + indicates a sum, a list '(k vec) denotes scaling a vector by k
   #+begin_src lisp
   '(+ (2 x) (3 y))
   #+end_src
** permutation
   A permutation is denoted by a list matching the standard notation, i.e. (1 2 3) sends 1->2->3->1
* Computing things
** Steenrod diagonals
  To calculate the n-th steenrod diagonal of expr, you use 
  #+begin_src lisp
(xi n expr)
  #+end_src
** Permutations of tensors
*** Collapsing tensors
   Most of the code (at the moment) assumes that tensors are always arity 2. To take permutations of tensors, you have to first call flatten-tensor, which will walk the tree you input and reduce all nested tensors to one higher-arity tensor.
*** Permuting tensors 
    To invoke the permutation (p1 p2 ... p3) on all tensors in the expression expr, use
    #+begin_src lisp
(permute-tensor '(p1 p2 ... p3) expr)
    #+end_src
