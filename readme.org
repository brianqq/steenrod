This program calculates the Steenrod higher diagonals of a linear combination of simplices. 
* examples
** calculate steenrod diagonals
   To calculate the steenrod 2-diagonal of an 3-simplex, do 
   #+begin_src lisp
(delta-n 2 (standard-simp 3))
   #+end_src
   with output
   #+begin_src lisp
(+ (:TENSOR (:SIMPLEX #(0 1 2)) (:SIMPLEX #(0 1 2 3)))
   (:TENSOR (:SIMPLEX #(0 1 2 3)) (:SIMPLEX #(0 1 3)))
   (:TENSOR (:SIMPLEX #(0 2 3)) (:SIMPLEX #(0 1 2 3)))
   (:TENSOR (:SIMPLEX #(0 1 2 3)) (:SIMPLEX #(1 2 3))))
   #+end_src
   To calculate the step operation for the 4-diagonal, 
   #+begin_src lisp
(delta-n-step 4)
   #+end_src
   with output 
   #+begin_src lisp
(:STEP (0 1 0 1 0 1))
   #+end_src
* simplices 
  A simplex is represented as 
  #+begin_src lisp
'(:simplex #(0 1 2 3))
  #+end_src
  Which is a list containing two elements: the tag =:simplex= and a vector. 
  
  This can also be written as 
  #+begin_src lisp
(list :simplex #(0 1 2 3))
  #+end_src
  or 
  #+begin_src lisp
(list :simplex (vector 0 1 2 3))
  #+end_src
** standard simplices
   The function 
  #+begin_src lisp
(standard-simp n)
  #+end_src
   creates the standard =n=-simplex.
* linear combinations
  A linear combination is represented by a list with =+= as the first element
  For example, =0|01 + 01|1=, is represented as 
  #+begin_src lisp
'(+ (:tensor (:simplex #(0)) (:simplex #(0 1)))
    (:tensor (:simplex #(0 1) (:simplex #(1)))))
  #+end_src
** algebraic simplification
   The function =mega-tidy= simplifies an algebraic expression until it is in simplest form.   
  #+begin_src lisp
(mega-tidy
 '(+ (:tensor (:simplex #(0)) (:simplex #(0 1)))
     (:tensor (:simplex #(0 1) (:simplex #(1))))
     (:tensor (:simplex #(0)) (:simplex #(0 1)))))
  #+end_src
   outputs 
  #+begin_src lisp
(:TENSOR (:SIMPLEX #(0 1) (:SIMPLEX #(1))))
  #+end_src
* step operations
  Step operations are stored as a list of two elements, the first is the =:step= tag, the second is a list of numbers. 
  The list indicates the height of each horizontal step.
  #+begin_src verbose
0. __    __
1.   |__|
  #+end_src
  is
  #+begin_src lisp
'(:step (0 1 0))
  #+end_src
** actions
   To find the action of a step on a simplex, use =step-act=, e.g.
   #+begin_src lisp
(step-act '(:step (0 1 0)) '(:simplex #(0 1 2 3)))
   #+end_src
   outputs
   #+begin_src lisp
(+ (:TENSOR (:SIMPLEX #(0 1 2 3)) (:SIMPLEX #(0 1)))
   (:TENSOR (:SIMPLEX #(0 2 3)) (:SIMPLEX #(0 1 2)))
   (:TENSOR (:SIMPLEX #(0 1 2 3)) (:SIMPLEX #(1 2)))
   (:TENSOR (:SIMPLEX #(0 3)) (:SIMPLEX #(0 1 2 3)))
   (:TENSOR (:SIMPLEX #(0 1 3)) (:SIMPLEX #(1 2 3)))
   (:TENSOR (:SIMPLEX #(0 1 2 3)) (:SIMPLEX #(2 3))))
   #+end_src
* boundary
  To take a boundary, call 
  #+begin_src lisp
(boundary '(:simplex #(0 1 2 3)))
  #+end_src
  with output
  #+begin_src lisp
(+ (:SIMPLEX #(1 2 3)) (:SIMPLEX #(0 2 3)) (:SIMPLEX #(0 1 3))
   (:SIMPLEX #(0 1 2)))
  #+end_src 
  You can call this on simplices, tensors, and steps. 
* optrees
  To represent a tree such as 
  #+begin_src verbose
 0 1 2
 \/ /
1 \/
  4
  #+end_src
  use
  #+begin_src lisp
'(:delta 4 (:delta 1 0 1) 2)
  #+end_src
  The first number after the delta indicates the dimension of the steenrod diagonal to use. The rest of the numebrs indicate the order of the output. 
  Another example
  #+begin_src verbose
0 1 2 3
 \/  \/
 2\  /0
   \/
   1 
  #+end_src 
  is represtend by 
  #+begin_src lisp
'(:delta 1 (:delta 2 0 1) (:delta 0 2 3))
  #+end_src
  To determine the representation from a tree, whenever you have a split, use =(:delta - - -)=, and for the leaves, just write the number of the leaf.
** comiling to a step
   To compile an optree to a step, use =compile-optree=, e.g.
   #+begin_src lisp
(compile-optree '(:delta 1 (:delta 2 0 1) (:delta 0 2 3)))
   #+end_src
   outputs
   #+begin_src lisp
(+ (:STEP (2 0 1 0 1 2 3)) (:STEP (2 3 0 1 0 1 3)))
   #+end_src
   If you just want to call an optree
** calling an optree
   To call an optree, you can either compile it to a step and use =step-act=
   Or you can use =call-optree=, i.e.
   #+begin_src lisp
(call-optree '(:delta 0 (:delta 1 0 1) 2) '(:simplex #(0 1 2)))
   #+end_src
   outputs
   #+begin_src lisp
(+ (:TENSOR (:SIMPLEX #(0 1)) (:SIMPLEX #(0 1 2)) (:SIMPLEX #(2)))
   (:TENSOR (:SIMPLEX #(0 1 2)) (:SIMPLEX #(0 2)) (:SIMPLEX #(2)))
   (:TENSOR (:SIMPLEX #(1 2)) (:SIMPLEX #(0 1 2)) (:SIMPLEX #(2)))
   (:TENSOR (:SIMPLEX #(0 1)) (:SIMPLEX #(0 1)) (:SIMPLEX #(1 2))))
   #+end_src
* lisp necessities
** lists
   #+begin_src lisp
'(a b c d)
   #+end_src
   the difference being each argument to =list= is evaluated, whereas none of '(a b c d) are evaluated.
   So 
   #+begin_src lisp
(list (+ 1 1) (+ 2 2) (+ 3 3))
   #+end_src
   evaluates to 
   #+begin_src lisp
(2 4 6)
   #+end_src
   and 
   #+begin_src lisp
'((+ 1 1) (+ 2 2) (+ 3 3))
   #+end_src
   evaluates to itself:
   #+begin_src lisp
((+ 1 1) (+ 2 2) (+ 3 3))
   #+end_src
** vectors 
   To define a vector you can either say
   #+begin_src lisp
#(a b c)
   #+end_src
   which evaluates none of its arguments, or
   #+begin_src lisp
(vector a b c)
   #+end_src 
   which evaluates each of its arguments.
