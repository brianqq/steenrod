This program calculates the Steenrod higher diagonals of a linear combination of simplices. 
* simplices 
  A simplex is represented as 
  #+begin_src lisp
'(:simplex #(0 1 2 3))
  #+end_src
  Which is a list containing two elements: the tag =:simplex= and a vector. 
  
  This can also be written as 
  #+begin_src lisp
(list :simplex #(0 1 2 3))
  #+end_src
  or 
  #+begin_src lisp
(list :simplex (vector 0 1 2 3))
  #+end_src
** standard simplices
  The function 
  #+begin_src lisp
(standard-simp n)
  #+end_src
  creates the standard =n=-simplex.
* linear combinations
  A linear combination is represented by a list with =+= as the first element
  For example, =0|01 + 01|1=, is represented as 
  #+begin_src lisp
'(+ (:tensor (:simplex #(0)) (:simplex #(0 1)))
    (:tensor (:simplex #(0 1) (:simplex #(1)))))
  #+end_src
** algebraic simplification
  The function =mega-tidy= simplifies an algebraic expression until it is in simplest form.   
  #+begin_src lisp
(mega-tidy
 '(+ (:tensor (:simplex #(0)) (:simplex #(0 1)))
     (:tensor (:simplex #(0 1) (:simplex #(1))))
     (:tensor (:simplex #(0)) (:simplex #(0 1)))))
  #+end_src
  outputs 
  #+begin_src lisp
(:TENSOR (:SIMPLEX #(0 1) (:SIMPLEX #(1))))
  #+end_src
* step operations
  Step operations are stored as a list of two elements, the first is the =:step= tag, the second is a vector. 
  The vector indicates the height of each horizontal step.
  #+begin_src verbose
0. __    __
1.   |__|
  #+end_src
  is
  #+begin_src lisp
'(:step #(0 1 0))
  #+end_src
